{"expireTime":9007200881783683000,"key":"gatsby-plugin-mdx-entire-payload-46805da7f5c0542750e784fb78db0105-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Syntax Highlighting","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":20,"offset":20},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":20,"offset":20},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"import React, { useReducer } from 'react';\n\nexport const GlobalStateContext = React.createContext();\nexport const GlobalDispatchContext = React.createContext();\n\nconst initialState = {\n  collapsed: {}\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'TOGGLE_NAV_COLLAPSED':\n      return {\n        ...state,\n        collapsed: {\n          ...state.collapsed,\n          [action.url]: !state.collapsed[action.url]\n        }\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n}\n\nconst GlobalContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <GlobalStateContext.Provider value={state}>\n      <GlobalDispatchContext.Provider value={dispatch}>{children}</GlobalDispatchContext.Provider>\n    </GlobalStateContext.Provider>\n  );\n};\n\nexport default GlobalContextProvider;","position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":41,"column":4,"offset":899},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Codeblock\",\"description\":\"This is the meta description for this page\"}","position":{"start":{"line":44,"column":1,"offset":902},"end":{"line":44,"column":109,"offset":1010},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":44,"column":109,"offset":1010}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Codeblock\",\n  \"description\": \"This is the meta description for this page\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Syntax Highlighting\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import React, { useReducer } from 'react';\\n\\nexport const GlobalStateContext = React.createContext();\\nexport const GlobalDispatchContext = React.createContext();\\n\\nconst initialState = {\\n  collapsed: {}\\n};\\n\\nfunction reducer(state, action) {\\n  switch (action.type) {\\n    case 'TOGGLE_NAV_COLLAPSED':\\n      return {\\n        ...state,\\n        collapsed: {\\n          ...state.collapsed,\\n          [action.url]: !state.collapsed[action.url]\\n        }\\n      };\\n    default:\\n      return {\\n        ...state\\n      };\\n  }\\n}\\n\\nconst GlobalContextProvider = ({ children }) => {\\n  const [state, dispatch] = useReducer(reducer, initialState);\\n  return (\\n    <GlobalStateContext.Provider value={state}>\\n      <GlobalDispatchContext.Provider value={dispatch}>{children}</GlobalDispatchContext.Provider>\\n    </GlobalStateContext.Provider>\\n  );\\n};\\n\\nexport default GlobalContextProvider;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Codeblock\",\n  \"description\": \"This is the meta description for this page\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Syntax Highlighting`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React, { useReducer } from 'react';\n\nexport const GlobalStateContext = React.createContext();\nexport const GlobalDispatchContext = React.createContext();\n\nconst initialState = {\n  collapsed: {}\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'TOGGLE_NAV_COLLAPSED':\n      return {\n        ...state,\n        collapsed: {\n          ...state.collapsed,\n          [action.url]: !state.collapsed[action.url]\n        }\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n}\n\nconst GlobalContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <GlobalStateContext.Provider value={state}>\n      <GlobalDispatchContext.Provider value={dispatch}>{children}</GlobalDispatchContext.Provider>\n    </GlobalStateContext.Provider>\n  );\n};\n\nexport default GlobalContextProvider;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}